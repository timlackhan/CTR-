init_worker_by_lua '
        local update_handler
        update_handler = function()
                local model_mgr = require "script/modelDT"
		local decisionTree = require "script/decisionTree_out"
                model_mgr.load("/usr/local/openresty/lualib/script/attrs.txt")
		
                local ok,err=ngx.timer.at(10.update_handler)
                if not ok then
                        ngx.log(ngx.ERR,"failed to create timer:",err)
                end
        end

        local ok,err = ngx.timer.at(0,update_handler)
        if not ok then
                ngx.log(ngx.ERR,"failed to create timer:",err)
        end
';


server{
        listen 80;
        server_name 192.168.1.181;
        access_log /tmp/ctr_access.log;
        error_log /tmp/ctr_error.log;

        default_type application/json;
        charset utf-8;

        location = /get/ctr {

                content_by_lua '
                        local model_mgr = require "script/modelDT"
                        local cjson = require "cjson"
                        local decode = cjson.decode
                        local transformer = require "script/transformerDT"

                        ngx.req.read_body()

                        local body = ngx.req.get_body_data()
                        local args 
                        local features_for_predict = {}
                        local ctr
                        local model_attrs = {}
			local length

                        ngx.say(body)

                        local ok,req = pcall(decode,body)
                        if not ok then
                                ngx.exit(400)
                        end
                        args = req
                        model_attrs, length = model_mgr.load(features_for_predict,"/usr/local/openresty/lualib/script/attrs.txt")
			--for k,v in pairs(features_for_predict) do
			--	ngx.say(k," ",v)
			--end

			ngx.say(length)


			--transformer.gen_adslot_labels(features_for_predict,args,model_attrs)
                        --transformer.gen_adx(features_for_predict,args,model_attrs)
			--transformer.gen_impct(features_for_predict,args,model_attrs)			
			--transformer.gen_platform_labels(features_for_predict,args,model_attrs)
			--transformer.gen_geo_labels(features_for_predict,args,model_attrs)
			--transformer.gen_advertiser_id(features_for_predict,args,model_attrs)
			--transformer.gen_adslot_pos(features_for_predict,args,model_attrs)		
			--transformer.gen_creative_id(features_for_predict,args,model_attrs)
			--transformer.gen_os(features_for_predict,args,model_attrs)
                        --transformer.gen_browser(features_for_predict,args,model_attrs)
			--transformer.gen_devicetype(features_for_predict,args,model_attrs)
			--transformer.gen_pday(features_for_predict,args,model_attrs)
			--transformer.gen_phour(features_for_predict,args,model_attrs)
			--transformer.gen_creative_size(features_for_predict,args,model_attrs)



			for _, func in pairs(transformer) do
	           		func(features_for_predict, args, model_attrs)
	    		end
			
			for k,v in pairs(features_for_predict) do
				ngx.say(k," ",v)
			end
			
			local decisionTree = require "script/decisionTree_out"
			ngx.say("the result is",decisionTree.predict(features_for_predict))

                        --for _,func in pairs(transformer) do
                        --       func(features_for_predict,args,model_attrs)
                        --end
			--for key,val in pairs(model_attrs) do
			--	ngx.say("key: ",key,"value: ",model_attrs[key])
			--end
                        --ctr=model_mgr:predict(features_for_predict)
                        --ngx.say(ctr)
                ';
        }
}


